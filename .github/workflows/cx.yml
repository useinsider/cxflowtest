# This is a basic workflow to create GitHub Issues using the Checkmarx CxFlow GitHub Action.  It runs on a pull-request to the main branch.
#
# The following GitHub Secrets must be first defined:
#   - CHECKMARX_URL
#   - CHECKMARX_USER
#   - CHECKMARX_PASSWORD
#   - CHECKMARX_CLIENT_SECRET
#   - GH_TOKEN
#
# Update the 'team' field to reflect the team name used in Checkmarx.
#
# For full documentation,including a list of all inputs, please refer to the README https://github.com/checkmarx-ts/checkmarx-cxflow-github-action

name: CxFlow-GitHub-Pull-Request-New

# Controls when the action will run. Triggers the workflow on push or pull request events but only for the master branch
on:
  push:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel - this job is specifically configured to use the Checkmarx CxFlow Action
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on - Ubuntu is required as Docker is leveraged for the action
    runs-on: self-runner-node
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Checkmarx CxFlow Action
      id: checkmarx
      uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.4
      with:
        project: ${{ github.repository }}-PR
        team: ${{ secrets.CHECKMARX_TEAMS }}
        checkmarx_url: ${{ secrets.CHECKMARX_URL }}   # To be stored in GitHub Secrets.
        checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}  # To be stored in GitHub Secrets.
        checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}  # To be stored in GitHub Secrets.
        checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}  # To be stored in GitHub Secrets.
        scan-preset: Checkmarx Default
        incremental: true
        break_build: false
        scanners: sast
        params: --namespace=${{ github.repository_owner }} --repo-name=${{ github.event.repository.name }} --branch=${{ github.head_ref }} --cx-flow.filterSeverity --cx-flow.filterCategory
    - name: The job has failed
      if: ${{ failure() }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"FAILURE '${{ github.repository }}'"}' \
        $SlackWebHook
      env:
        SlackWebHook: ${{ secrets.CHECKMARX_SLACK_WEBHOOK }}
    - name: Slack notification
      id: slack-notification
      if: ${{ success() }}
      run: |
        python -c '
        import json,sys,requests;
        output=open("./cx.sarif");
        json_result=json.loads(output.read());
        response="";
        json_result = json_result.get("runs", [{}])[0].get("tool", {}).get("driver", {}).get("rules", []);
        if len(json_result) != 0: response+=":alert::alert::alert::alert::alert:'${{ github.repository }}':alert::alert::alert::alert::alert:\n<'${{ github.server_url }}'/'${{ github.repository }}'/actions/runs/'${{ github.run_id }}'| Go to GitAction>\n";
        for vuln in json_result: response+=("Type: " + vuln["name"] + "\n" + "Severity:" + vuln["properties"]["security-severity"] + "\n<" + vuln["help"]["markdown"].split("[Results](")[1].split(")")[0].split("&pathid")[0] + "|Checkmarx Details>\n\n\n");
        requests.post("'$SlackWebHook'", json={"text":response});'
      env:
        SlackWebHook: ${{ secrets.CHECKMARX_SLACK_WEBHOOK }}